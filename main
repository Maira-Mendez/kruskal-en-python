# Clase para representar un grafo ponderado
class Grafo:
    def __init__(self, vertices):
        self.V = vertices  # Número de vértices
        self.grafo = []    # Lista de aristas (u, v, peso)

    # Añadir una arista al grafo
    def agregar_arista(self, u, v, peso):
        self.grafo.append([u, v, peso])

    # Función para encontrar el subconjunto de un elemento (con compresión de caminos)
    def encontrar(self, parent, i):
        if parent[i] == i:
            return i
        return self.encontrar(parent, parent[i])

    # Función para hacer la unión de dos subconjuntos (con unión por rango)
    def union(self, parent, rank, x, y):
        raiz_x = self.encontrar(parent, x)
        raiz_y = self.encontrar(parent, y)

        if rank[raiz_x] < rank[raiz_y]:
            parent[raiz_x] = raiz_y
        elif rank[raiz_x] > rank[raiz_y]:
            parent[raiz_y] = raiz_x
        else:
            parent[raiz_y] = raiz_x
            rank[raiz_x] += 1

    # Función principal del algoritmo de Kruskal
    def kruskal(self):
        resultado = []  # Lista para almacenar el MST final
        i = 0  # Índice para recorrer las aristas ordenadas
        e = 0  # Contador de aristas en el MST

        #Ordena todas las aristas en orden creciente de peso con la funcion sorted
        self.grafo = sorted(self.grafo, key=lambda item: item[2])

        parent = []
        rank = []

        # Crea subconjuntos con un solo elemento para cada vértice
        for nodo in range(self.V):
            parent.append(nodo)
            rank.append(0)

        # Número de aristas en el MST debe ser V-1
        while e < self.V - 1:
            # Tomar la siguiente arista de la lista ordenada
            u, v, peso = self.grafo[i]
            i += 1
            x = self.encontrar(parent, u)
            y = self.encontrar(parent, v)

            # Si incluir esta arista no forma un ciclo, añadirla al resultado
            if x != y:
                e += 1
                resultado.append([u, v, peso])
                self.union(parent, rank, x, y)

        # Imprimir las aristas del MST
        print("Aristas en el árbol de expansión mínima:")
        for u, v, peso in resultado:
            print(f"{u} -- {v} == {peso}")

# Ejemplo de uso:
g = Grafo(4)
g.agregar_arista(0, 1, 10)
g.agregar_arista(0, 2, 6)
g.agregar_arista(0, 3, 5)
g.agregar_arista(1, 3, 15)
g.agregar_arista(2, 3, 4)

g.kruskal()

